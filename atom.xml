<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Kaleem Clarkson]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2014-12-23T17:21:21+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[How to Exclude Block Content from Your Template in Twigsn]]></title>
            <link href="/blog/2014/12/14/twig-extend-filter"/>
            <updated>2014-12-14T00:00:00+01:00</updated>
            <id>/blog/2014/12/14/twig-extend-filter</id>
            <content type="html"><![CDATA[<p>When looking through the Twig Documentation an Sensio Labs you can often get lost in the great feature sets that come baked into twig. One of the awesome features in Twig is the ability to use the extends feature for templating. Verys similar to how you can use @extend in SASS to reuse code the extend feature is great.</p>

<p>This is common when you want to re-use code from for the <head> tag.  Butwhat if you want to use some of the header code but want to cusomize some of it.</p>

<p>Simple solution is give them blocks the print with a space empty.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Dates in Sculpin]]></title>
            <link href="/blog/2014/12/12/dates-in-sculpin"/>
            <updated>2014-12-12T00:00:00+01:00</updated>
            <id>/blog/2014/12/12/dates-in-sculpin</id>
            <content type="html"><![CDATA[<p>While retraining the brain to go old school with markdown and raw HTML. One thing I was looking for was the date posting. Come to find out Sculpin can read the URL of your post if written in a certain syntaxt.  In combination with the naming you can now use twig <code>date</code> filter you can unlock a ton of goodness.</p>

<pre><code>namespace Foo;

/**
 * Awesome Contrived Example.
 */
class Bar implements BarInterface
{
    private $baz;

    public function __construct(BazInterface $baz)
    {
        $this-&gt;baz = $baz;
    }

    public function doIt()
    {
        return $this-&gt;baz-&gt;do('it');
    }
}
</code></pre>

<p>You can also use <a href="http://michelf.ca/projects/php-markdown/extra/#fenced-code-blocks">fenced code blocks</a> with a syntax declaration at the top.
The markers are <code>~</code> instead of <code>`</code>.</p>

<pre><code class="php">if ($fencedCodeBlock-&gt;syntax !== 'PHP') {
    throw new UnexpectedValueException("wat");
}
</code></pre>

<p>Like this addition to the skeleton? You can thank for <a href="https://github.com/Pawka">@Pawka</a>
for suggesting it. :)</p>
]]></content>
        </entry>
    </feed>